syntax="proto2";
package elasticfaiss;
option cc_generic_services = true;

import "shard.proto";


message ClusterSettings{
   optional int32 shard_allocation_after_timeout_secs = 1  [default = 60];
   optional int32 total_shards_per_node               = 2  [default = -1];
   optional int32 index_rpc_timeout_ms                = 3  [default = 10000];
   optional int32 index_rpc_max_retry                 = 4  [default = 2];
}

enum WorkNodeState{
    WNODE_ACTIVE  = 1; 
    WNODE_TIMEOUT = 2;
}

enum NodeRole{
    NODE_DATA  = 1; 
    NODE_PROXY = 2;
}

message WorkNode{
    required string peer_id = 1;
    optional int64 last_active_ms = 2;
    optional int64 last_state_ms  = 3;
    repeated Shard shards = 4;
    optional int32 state = 5;
}

message ClusterState{
    optional int64  update_ms = 1;
    repeated WorkNode nodes = 2; 
}

message MasterSnapshot{
    optional  ClusterState state = 1;
    repeated  IndexConf index = 2;
    optional  ClusterSettings settings = 3;
}

message BootstrapRequest {
    required string node_peer = 1;
    optional int64  boot_ms   = 2;
};

message BootstrapResponse {
    required bool success = 1;
    optional string redirect = 2;
    repeated WorkNode nodes = 3;   
    repeated IndexShardConf shards = 4; 
};

message NodeHeartbeatRequest {
    required string node_peer  = 1;
    optional int64  active_ms  = 2;
    repeated Shard  shards     = 3;
};

message NodeHeartbeatResponse {
    required bool success = 1;
    optional string redirect = 2;
    repeated WorkNode nodes = 3; 
};

message GetClusterStateRequest{
    required string cluster   = 1;
};

message GetClusterStateResponse{
    required bool success = 1;
    optional string redirect = 2;
    optional ClusterState state   = 3;
};

message CreateIndexRequest {
    required  IndexConf conf = 1;
};

message CreateIndexResponse {
    required bool success = 1;
    optional string redirect = 2;
    optional string error = 3;
};

message DeleteIndexRequest {
    required string index_name = 1;
};

message DeleteIndexResponse {
    required bool success = 1;
    optional string redirect = 2;
    optional string error = 3;
};

message UpdateIndexRequest {
    required  IndexConf conf    = 1;
};

message UpdateIndexResponse {
    required bool success = 1;
    optional string redirect = 2;
    optional string error = 3;
};

message UpdateNodeRequest {
    required string peer_id = 1;
    optional int32  state = 2;
    required int64  state_ms  = 3;
    repeated Shard  shards = 4;
};

message UpdateNodeResponse {
    required bool success = 1;
    optional string redirect = 2;
    optional string error = 3;
};

message UpdateClusterSettingRequest {
    required ClusterSettings settings = 1;
};

message UpdateClusterSettingResponse {
    required bool success = 1;
    optional string redirect = 2;
    optional string error = 3;
};


service MasterService {
    rpc bootstrap(BootstrapRequest) returns (BootstrapResponse);
    rpc node_heartbeat(NodeHeartbeatRequest) returns (NodeHeartbeatResponse);
    rpc cluster_setting(UpdateClusterSettingRequest) returns (UpdateClusterSettingResponse);
    rpc get_cluster_state(GetClusterStateRequest) returns (GetClusterStateResponse);
    
    rpc create_index(CreateIndexRequest) returns (CreateIndexResponse);
    rpc delete_index(DeleteIndexRequest) returns (DeleteIndexResponse); 
    rpc update_index(UpdateIndexRequest) returns (UpdateIndexResponse); 
};


