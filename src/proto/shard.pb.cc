// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shard.proto

#include "shard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_shard_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_shard_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IndexConf;
}  // namespace protobuf_shard_2eproto
namespace elasticfaiss {
class IndexConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndexConf>
      _instance;
} _IndexConf_default_instance_;
class ShardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Shard>
      _instance;
} _Shard_default_instance_;
class IndexShardConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndexShardConf>
      _instance;
} _IndexShardConf_default_instance_;
}  // namespace elasticfaiss
namespace protobuf_shard_2eproto {
static void InitDefaultsIndexConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::elasticfaiss::_IndexConf_default_instance_;
    new (ptr) ::elasticfaiss::IndexConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::elasticfaiss::IndexConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IndexConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIndexConf}, {}};

static void InitDefaultsShard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::elasticfaiss::_Shard_default_instance_;
    new (ptr) ::elasticfaiss::Shard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::elasticfaiss::Shard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Shard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShard}, {}};

static void InitDefaultsIndexShardConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::elasticfaiss::_IndexShardConf_default_instance_;
    new (ptr) ::elasticfaiss::IndexShardConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::elasticfaiss::IndexShardConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IndexShardConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIndexShardConf}, {
      &protobuf_shard_2eproto::scc_info_IndexConf.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_IndexConf.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Shard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndexShardConf.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::IndexConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::IndexConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::IndexConf, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::IndexConf, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::IndexConf, number_of_shards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::IndexConf, number_of_replicas_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::Shard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::Shard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::Shard, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::Shard, idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::Shard, is_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::Shard, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::Shard, nodes_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::IndexShardConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::IndexShardConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::IndexShardConf, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::IndexShardConf, shard_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::elasticfaiss::IndexShardConf, nodes_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::elasticfaiss::IndexConf)},
  { 13, 23, sizeof(::elasticfaiss::Shard)},
  { 28, 36, sizeof(::elasticfaiss::IndexShardConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::elasticfaiss::_IndexConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::elasticfaiss::_Shard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::elasticfaiss::_IndexShardConf_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "shard.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013shard.proto\022\014elasticfaiss\"]\n\tIndexConf"
      "\022\014\n\004name\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\030\n\020number_o"
      "f_shards\030\003 \002(\005\022\032\n\022number_of_replicas\030\004 \002"
      "(\005\"S\n\005Shard\022\014\n\004name\030\001 \002(\t\022\013\n\003idx\030\002 \002(\005\022\021"
      "\n\tis_leader\030\003 \001(\010\022\r\n\005state\030\004 \001(\005\022\r\n\005node"
      "s\030\005 \003(\t\"Y\n\016IndexShardConf\022%\n\004conf\030\001 \002(\0132"
      "\027.elasticfaiss.IndexConf\022\021\n\tshard_idx\030\002 "
      "\002(\005\022\r\n\005nodes\030\003 \003(\t*1\n\nShardState\022\021\n\rSHAR"
      "D_LOADING\020\001\022\020\n\014SHARD_ACTIVE\020\0022\016\n\014ShardSe"
      "rviceB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 370);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "shard.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_shard_2eproto
namespace elasticfaiss {
const ::google::protobuf::EnumDescriptor* ShardState_descriptor() {
  protobuf_shard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shard_2eproto::file_level_enum_descriptors[0];
}
bool ShardState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void IndexConf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexConf::kNameFieldNumber;
const int IndexConf::kTypeFieldNumber;
const int IndexConf::kNumberOfShardsFieldNumber;
const int IndexConf::kNumberOfReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexConf::IndexConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shard_2eproto::scc_info_IndexConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:elasticfaiss.IndexConf)
}
IndexConf::IndexConf(const IndexConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&number_of_shards_, &from.number_of_shards_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_replicas_) -
    reinterpret_cast<char*>(&number_of_shards_)) + sizeof(number_of_replicas_));
  // @@protoc_insertion_point(copy_constructor:elasticfaiss.IndexConf)
}

void IndexConf::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_of_shards_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_replicas_) -
      reinterpret_cast<char*>(&number_of_shards_)) + sizeof(number_of_replicas_));
}

IndexConf::~IndexConf() {
  // @@protoc_insertion_point(destructor:elasticfaiss.IndexConf)
  SharedDtor();
}

void IndexConf::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IndexConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IndexConf::descriptor() {
  ::protobuf_shard_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexConf& IndexConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shard_2eproto::scc_info_IndexConf.base);
  return *internal_default_instance();
}


void IndexConf::Clear() {
// @@protoc_insertion_point(message_clear_start:elasticfaiss.IndexConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&number_of_shards_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_replicas_) -
        reinterpret_cast<char*>(&number_of_shards_)) + sizeof(number_of_replicas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IndexConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elasticfaiss.IndexConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "elasticfaiss.IndexConf.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "elasticfaiss.IndexConf.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 number_of_shards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_number_of_shards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_shards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 number_of_replicas = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_number_of_replicas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elasticfaiss.IndexConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elasticfaiss.IndexConf)
  return false;
#undef DO_
}

void IndexConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elasticfaiss.IndexConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elasticfaiss.IndexConf.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elasticfaiss.IndexConf.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required int32 number_of_shards = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number_of_shards(), output);
  }

  // required int32 number_of_replicas = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->number_of_replicas(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elasticfaiss.IndexConf)
}

::google::protobuf::uint8* IndexConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:elasticfaiss.IndexConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elasticfaiss.IndexConf.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elasticfaiss.IndexConf.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required int32 number_of_shards = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number_of_shards(), target);
  }

  // required int32 number_of_replicas = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->number_of_replicas(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elasticfaiss.IndexConf)
  return target;
}

size_t IndexConf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:elasticfaiss.IndexConf)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_number_of_shards()) {
    // required int32 number_of_shards = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_shards());
  }

  if (has_number_of_replicas()) {
    // required int32 number_of_replicas = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_replicas());
  }

  return total_size;
}
size_t IndexConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:elasticfaiss.IndexConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required int32 number_of_shards = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_shards());

    // required int32 number_of_replicas = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_replicas());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:elasticfaiss.IndexConf)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:elasticfaiss.IndexConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:elasticfaiss.IndexConf)
    MergeFrom(*source);
  }
}

void IndexConf::MergeFrom(const IndexConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elasticfaiss.IndexConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      number_of_shards_ = from.number_of_shards_;
    }
    if (cached_has_bits & 0x00000008u) {
      number_of_replicas_ = from.number_of_replicas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndexConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:elasticfaiss.IndexConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexConf::CopyFrom(const IndexConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elasticfaiss.IndexConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void IndexConf::Swap(IndexConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexConf::InternalSwap(IndexConf* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(number_of_shards_, other->number_of_shards_);
  swap(number_of_replicas_, other->number_of_replicas_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IndexConf::GetMetadata() const {
  protobuf_shard_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shard_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Shard::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shard::kNameFieldNumber;
const int Shard::kIdxFieldNumber;
const int Shard::kIsLeaderFieldNumber;
const int Shard::kStateFieldNumber;
const int Shard::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shard::Shard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shard_2eproto::scc_info_Shard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:elasticfaiss.Shard)
}
Shard::Shard(const Shard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:elasticfaiss.Shard)
}

void Shard::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(state_));
}

Shard::~Shard() {
  // @@protoc_insertion_point(destructor:elasticfaiss.Shard)
  SharedDtor();
}

void Shard::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Shard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Shard::descriptor() {
  ::protobuf_shard_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Shard& Shard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shard_2eproto::scc_info_Shard.base);
  return *internal_default_instance();
}


void Shard::Clear() {
// @@protoc_insertion_point(message_clear_start:elasticfaiss.Shard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&idx_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Shard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elasticfaiss.Shard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "elasticfaiss.Shard.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_leader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_leader();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string nodes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nodes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodes(this->nodes_size() - 1).data(),
            static_cast<int>(this->nodes(this->nodes_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "elasticfaiss.Shard.nodes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elasticfaiss.Shard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elasticfaiss.Shard)
  return false;
#undef DO_
}

void Shard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elasticfaiss.Shard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elasticfaiss.Shard.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->idx(), output);
  }

  // optional bool is_leader = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_leader(), output);
  }

  // optional int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // repeated string nodes = 5;
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodes(i).data(), static_cast<int>(this->nodes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elasticfaiss.Shard.nodes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elasticfaiss.Shard)
}

::google::protobuf::uint8* Shard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:elasticfaiss.Shard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elasticfaiss.Shard.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->idx(), target);
  }

  // optional bool is_leader = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_leader(), target);
  }

  // optional int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // repeated string nodes = 5;
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodes(i).data(), static_cast<int>(this->nodes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elasticfaiss.Shard.nodes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->nodes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elasticfaiss.Shard)
  return target;
}

size_t Shard::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:elasticfaiss.Shard)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_idx()) {
    // required int32 idx = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  return total_size;
}
size_t Shard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:elasticfaiss.Shard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 idx = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string nodes = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->nodes_size());
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nodes(i));
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional bool is_leader = 3;
    if (has_is_leader()) {
      total_size += 1 + 1;
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:elasticfaiss.Shard)
  GOOGLE_DCHECK_NE(&from, this);
  const Shard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:elasticfaiss.Shard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:elasticfaiss.Shard)
    MergeFrom(*source);
  }
}

void Shard::MergeFrom(const Shard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elasticfaiss.Shard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_leader_ = from.is_leader_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Shard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:elasticfaiss.Shard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shard::CopyFrom(const Shard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elasticfaiss.Shard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Shard::Swap(Shard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shard::InternalSwap(Shard* other) {
  using std::swap;
  nodes_.InternalSwap(CastToBase(&other->nodes_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(idx_, other->idx_);
  swap(is_leader_, other->is_leader_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Shard::GetMetadata() const {
  protobuf_shard_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shard_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IndexShardConf::InitAsDefaultInstance() {
  ::elasticfaiss::_IndexShardConf_default_instance_._instance.get_mutable()->conf_ = const_cast< ::elasticfaiss::IndexConf*>(
      ::elasticfaiss::IndexConf::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexShardConf::kConfFieldNumber;
const int IndexShardConf::kShardIdxFieldNumber;
const int IndexShardConf::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexShardConf::IndexShardConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shard_2eproto::scc_info_IndexShardConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:elasticfaiss.IndexShardConf)
}
IndexShardConf::IndexShardConf(const IndexShardConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conf()) {
    conf_ = new ::elasticfaiss::IndexConf(*from.conf_);
  } else {
    conf_ = NULL;
  }
  shard_idx_ = from.shard_idx_;
  // @@protoc_insertion_point(copy_constructor:elasticfaiss.IndexShardConf)
}

void IndexShardConf::SharedCtor() {
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_idx_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(shard_idx_));
}

IndexShardConf::~IndexShardConf() {
  // @@protoc_insertion_point(destructor:elasticfaiss.IndexShardConf)
  SharedDtor();
}

void IndexShardConf::SharedDtor() {
  if (this != internal_default_instance()) delete conf_;
}

void IndexShardConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IndexShardConf::descriptor() {
  ::protobuf_shard_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexShardConf& IndexShardConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shard_2eproto::scc_info_IndexShardConf.base);
  return *internal_default_instance();
}


void IndexShardConf::Clear() {
// @@protoc_insertion_point(message_clear_start:elasticfaiss.IndexShardConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(conf_ != NULL);
    conf_->Clear();
  }
  shard_idx_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IndexShardConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elasticfaiss.IndexShardConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .elasticfaiss.IndexConf conf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 shard_idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_shard_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string nodes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nodes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodes(this->nodes_size() - 1).data(),
            static_cast<int>(this->nodes(this->nodes_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "elasticfaiss.IndexShardConf.nodes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elasticfaiss.IndexShardConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elasticfaiss.IndexShardConf)
  return false;
#undef DO_
}

void IndexShardConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elasticfaiss.IndexShardConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .elasticfaiss.IndexConf conf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_conf(), output);
  }

  // required int32 shard_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shard_idx(), output);
  }

  // repeated string nodes = 3;
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodes(i).data(), static_cast<int>(this->nodes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elasticfaiss.IndexShardConf.nodes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elasticfaiss.IndexShardConf)
}

::google::protobuf::uint8* IndexShardConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:elasticfaiss.IndexShardConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .elasticfaiss.IndexConf conf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_conf(), deterministic, target);
  }

  // required int32 shard_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shard_idx(), target);
  }

  // repeated string nodes = 3;
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodes(i).data(), static_cast<int>(this->nodes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elasticfaiss.IndexShardConf.nodes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->nodes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elasticfaiss.IndexShardConf)
  return target;
}

size_t IndexShardConf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:elasticfaiss.IndexShardConf)
  size_t total_size = 0;

  if (has_conf()) {
    // required .elasticfaiss.IndexConf conf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *conf_);
  }

  if (has_shard_idx()) {
    // required int32 shard_idx = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shard_idx());
  }

  return total_size;
}
size_t IndexShardConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:elasticfaiss.IndexShardConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .elasticfaiss.IndexConf conf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *conf_);

    // required int32 shard_idx = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shard_idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string nodes = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->nodes_size());
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nodes(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexShardConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:elasticfaiss.IndexShardConf)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexShardConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexShardConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:elasticfaiss.IndexShardConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:elasticfaiss.IndexShardConf)
    MergeFrom(*source);
  }
}

void IndexShardConf::MergeFrom(const IndexShardConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elasticfaiss.IndexShardConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_conf()->::elasticfaiss::IndexConf::MergeFrom(from.conf());
    }
    if (cached_has_bits & 0x00000002u) {
      shard_idx_ = from.shard_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndexShardConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:elasticfaiss.IndexShardConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexShardConf::CopyFrom(const IndexShardConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elasticfaiss.IndexShardConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexShardConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_conf()) {
    if (!this->conf_->IsInitialized()) return false;
  }
  return true;
}

void IndexShardConf::Swap(IndexShardConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexShardConf::InternalSwap(IndexShardConf* other) {
  using std::swap;
  nodes_.InternalSwap(CastToBase(&other->nodes_));
  swap(conf_, other->conf_);
  swap(shard_idx_, other->shard_idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IndexShardConf::GetMetadata() const {
  protobuf_shard_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shard_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ShardService::~ShardService() {}

const ::google::protobuf::ServiceDescriptor* ShardService::descriptor() {
  protobuf_shard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shard_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* ShardService::GetDescriptor() {
  return descriptor();
}

void ShardService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_shard_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ShardService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ShardService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ShardService_Stub::ShardService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ShardService_Stub::ShardService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ShardService_Stub::~ShardService_Stub() {
  if (owns_channel_) delete channel_;
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace elasticfaiss
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::elasticfaiss::IndexConf* Arena::CreateMaybeMessage< ::elasticfaiss::IndexConf >(Arena* arena) {
  return Arena::CreateInternal< ::elasticfaiss::IndexConf >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::elasticfaiss::Shard* Arena::CreateMaybeMessage< ::elasticfaiss::Shard >(Arena* arena) {
  return Arena::CreateInternal< ::elasticfaiss::Shard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::elasticfaiss::IndexShardConf* Arena::CreateMaybeMessage< ::elasticfaiss::IndexShardConf >(Arena* arena) {
  return Arena::CreateInternal< ::elasticfaiss::IndexShardConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
